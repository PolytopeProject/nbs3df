package codes.reason.nbs3df.mod

import codes.reason.nbs3df.mod.screen.AvailableSize
import codes.reason.nbs3df.mod.screen.FixedSize
import codes.reason.nbs3df.mod.screen.MenuRenderContext
import codes.reason.nbs3df.mod.screen.builder.ElementBuilder.Companion.root
import codes.reason.nbs3df.mod.screen.builder.Template.Companion.template
import codes.reason.nbs3df.mod.screen.builder.TemplateBody
import codes.reason.nbs3df.mod.screen.elements.BackgroundElement
import codes.reason.nbs3df.mod.screen.elements.background
import codes.reason.nbs3df.mod.screen.elements.border
import codes.reason.nbs3df.mod.screen.elements.button
import codes.reason.nbs3df.mod.screen.elements.padding
import codes.reason.nbs3df.mod.screen.elements.text
import codes.reason.nbs3df.mod.screen.layout.HorizontalAlignment
import codes.reason.nbs3df.mod.screen.layout.column
import codes.reason.nbs3df.mod.screen.layout.row
import com.mojang.brigadier.builder.LiteralArgumentBuilder
import net.fabricmc.api.ClientModInitializer
import net.fabricmc.fabric.api.client.command.v2.ClientCommandRegistrationCallback
import net.fabricmc.fabric.api.client.command.v2.FabricClientCommandSource
import net.kyori.adventure.text.Component
import net.kyori.adventure.text.format.TextColor
import net.minecraft.client.MinecraftClient
import net.minecraft.client.gui.DrawContext
import net.minecraft.client.gui.screen.Screen
import net.minecraft.text.Text
import java.awt.Color

class NBS3DFClientInitializer : ClientModInitializer {
    override fun onInitializeClient() {
        ClientCommandRegistrationCallback.EVENT.register { manager, _ ->
            manager.register(LiteralArgumentBuilder.literal<FabricClientCommandSource?>("screen").executes {
                val example = createMenu()

                val token = example.createToken(AvailableSize(width = 300, height = 100))

                it.source.sendFeedback(Text.literal("${token.width.preferredValue} is the preferred value"))

                MinecraftClient.getInstance().send {
                    MinecraftClient.getInstance().setScreen(object : Screen(
                        Text.literal("hello!")
                    ) {
                        override fun render(drawContext: DrawContext, mouseX: Int, mouseY: Int, deltaTime: Float) {
                            this.renderBackground(drawContext, mouseX, mouseY, deltaTime)
                            val context = MenuRenderContext(drawContext, mouseX, mouseY, deltaTime)
                            val width = token.width.preferredValue
                            val height = token.height.preferredValue

                            context.push()
                            context.translate(
                                (drawContext.scaledWindowWidth - width) / 2,
                                (drawContext.scaledWindowHeight - height) / 2
                            )
                            token.render(context, FixedSize(width, height))
                            context.pop()
                        }
                    })
                }
                1
            })
        }

        println("Hello Fabric World!")
    }
}

fun createMenu() = root {
    + opinionatedMenu {
        column(alignment = HorizontalAlignment.CENTER, spacing = 10) {
            text { Component.text("Copyright Notice!", TextColor.color(0xd4d4d8)) }
            text {
                Component.text(
                    ".nbs files are property of their creators. Please " +
                            "ensure you have permission from the authors before converting, " +
                            "using, or distributing templates generated by this tool.",
                    TextColor.color(0x9f9fa9)
                )
            }
            row(spacing = 10) {
                button(
                    color = Color(0x3f3f46),
                    hover = Color(0x71717b)
                ) {
                    text { Component.text("I understand", TextColor.color(0xd4d4d8)) }
                }
            }
        }
    }
}

fun opinionatedMenu(body: TemplateBody) = template {
    border(color = Color(0x52525c)) {
        background(
            color = Color(0x27272a),
            shadow = BackgroundElement.DropShadow(color = Color(0x09090b), x = 3, y = 3)
        ) {
            padding(10) {
                body()
            }
        }
    }
}